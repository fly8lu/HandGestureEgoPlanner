# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from uav_server/ControlCommand.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg
import uav_server.msg

class ControlCommand(genpy.Message):
  _md5sum = "605914d2f9074bf8ea386da8eb051ca0"
  _type = "uav_server/ControlCommand"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header

## 控制命令的编号 防止接收到错误命令， 编号应该逐次递加
uint32 Command_ID

## 消息来源
string source
## 控制命令的模式 
uint8 Mode
# enum Mode 控制模式枚举
uint8 Idle=0
uint8 Takeoff=1
uint8 Hold=2
uint8 Land=3
uint8 Move=4
uint8 Disarm=5
uint8 User_Mode1=6
uint8 User_Mode2=7

## 控制参考量 
## 位置参考量：位置、速度、加速度、加加速度、加加加速度
## 角度参考量：偏航角、偏航角速度、偏航角加速度
PositionReference Reference_State

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: uav_server/PositionReference
std_msgs/Header header

## 位置控制参考量

## 默认为 XYZ位置追踪模式 （sub_mode = 0）； 速度追踪启用时，控制器不考虑位置参考量及位置状态反馈
uint8 Move_mode

uint8 XYZ_POS      = 0  ##0b00
uint8 XY_POS_Z_VEL = 1  ##0b01
uint8 XY_VEL_Z_POS = 2  ##0b10
uint8 XYZ_VEL = 3       ##0b11
uint8 XYZ_ACC = 4
uint8 TRAJECTORY   = 5  

uint8 Move_frame
# 默认情况下均为ENU_FRAME,注意轨迹追踪和XYZ_ACC一定是ENU_FRAME
uint8 ENU_FRAME  = 0
uint8 BODY_FRAME = 1
uint8 MIX_FRAME = 2 ##2020.4.6 临时增加的模式，后期需要统一整合，该模式下，xy采用机体系控制，z采用enu系控制



## 时刻： 用于轨迹追踪
float32 time_from_start          ## [s]

## 参考量：位置、速度、加速度、加加速度、加加加速度
float32[3] position_ref          ## [m]
float32[3] velocity_ref          ## [m/s]
float32[3] acceleration_ref      ## [m/s^2]
## float32[3] jerk_ref              ## [m/s^3]
## float32[3] snap_ref              ## [m/s^4]

## 角度参考量：偏航角、偏航角速度、偏航角加速度
bool Yaw_Rate_Mode                      ## True 代表控制偏航角速率
float32 yaw_ref                  ## [rad]
float32 yaw_rate_ref             ## [rad/s] 
## float32 yaw_acceleration_ref     ## [rad/s] """
  # Pseudo-constants
  Idle = 0
  Takeoff = 1
  Hold = 2
  Land = 3
  Move = 4
  Disarm = 5
  User_Mode1 = 6
  User_Mode2 = 7

  __slots__ = ['header','Command_ID','source','Mode','Reference_State']
  _slot_types = ['std_msgs/Header','uint32','string','uint8','uav_server/PositionReference']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,Command_ID,source,Mode,Reference_State

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ControlCommand, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.Command_ID is None:
        self.Command_ID = 0
      if self.source is None:
        self.source = ''
      if self.Mode is None:
        self.Mode = 0
      if self.Reference_State is None:
        self.Reference_State = uav_server.msg.PositionReference()
    else:
      self.header = std_msgs.msg.Header()
      self.Command_ID = 0
      self.source = ''
      self.Mode = 0
      self.Reference_State = uav_server.msg.PositionReference()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Command_ID
      buff.write(_get_struct_I().pack(_x))
      _x = self.source
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.Mode, _x.Reference_State.header.seq, _x.Reference_State.header.stamp.secs, _x.Reference_State.header.stamp.nsecs))
      _x = self.Reference_State.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Bf().pack(_x.Reference_State.Move_mode, _x.Reference_State.Move_frame, _x.Reference_State.time_from_start))
      buff.write(_get_struct_3f().pack(*self.Reference_State.position_ref))
      buff.write(_get_struct_3f().pack(*self.Reference_State.velocity_ref))
      buff.write(_get_struct_3f().pack(*self.Reference_State.acceleration_ref))
      _x = self
      buff.write(_get_struct_B2f().pack(_x.Reference_State.Yaw_Rate_Mode, _x.Reference_State.yaw_ref, _x.Reference_State.yaw_rate_ref))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.Reference_State is None:
        self.Reference_State = uav_server.msg.PositionReference()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.Command_ID,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.source = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.source = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.Mode, _x.Reference_State.header.seq, _x.Reference_State.header.stamp.secs, _x.Reference_State.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Reference_State.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Reference_State.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 6
      (_x.Reference_State.Move_mode, _x.Reference_State.Move_frame, _x.Reference_State.time_from_start,) = _get_struct_2Bf().unpack(str[start:end])
      start = end
      end += 12
      self.Reference_State.position_ref = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.Reference_State.velocity_ref = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.Reference_State.acceleration_ref = _get_struct_3f().unpack(str[start:end])
      _x = self
      start = end
      end += 9
      (_x.Reference_State.Yaw_Rate_Mode, _x.Reference_State.yaw_ref, _x.Reference_State.yaw_rate_ref,) = _get_struct_B2f().unpack(str[start:end])
      self.Reference_State.Yaw_Rate_Mode = bool(self.Reference_State.Yaw_Rate_Mode)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Command_ID
      buff.write(_get_struct_I().pack(_x))
      _x = self.source
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.Mode, _x.Reference_State.header.seq, _x.Reference_State.header.stamp.secs, _x.Reference_State.header.stamp.nsecs))
      _x = self.Reference_State.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Bf().pack(_x.Reference_State.Move_mode, _x.Reference_State.Move_frame, _x.Reference_State.time_from_start))
      buff.write(self.Reference_State.position_ref.tostring())
      buff.write(self.Reference_State.velocity_ref.tostring())
      buff.write(self.Reference_State.acceleration_ref.tostring())
      _x = self
      buff.write(_get_struct_B2f().pack(_x.Reference_State.Yaw_Rate_Mode, _x.Reference_State.yaw_ref, _x.Reference_State.yaw_rate_ref))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.Reference_State is None:
        self.Reference_State = uav_server.msg.PositionReference()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.Command_ID,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.source = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.source = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.Mode, _x.Reference_State.header.seq, _x.Reference_State.header.stamp.secs, _x.Reference_State.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Reference_State.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Reference_State.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 6
      (_x.Reference_State.Move_mode, _x.Reference_State.Move_frame, _x.Reference_State.time_from_start,) = _get_struct_2Bf().unpack(str[start:end])
      start = end
      end += 12
      self.Reference_State.position_ref = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.Reference_State.velocity_ref = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.Reference_State.acceleration_ref = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      _x = self
      start = end
      end += 9
      (_x.Reference_State.Yaw_Rate_Mode, _x.Reference_State.yaw_ref, _x.Reference_State.yaw_rate_ref,) = _get_struct_B2f().unpack(str[start:end])
      self.Reference_State.Yaw_Rate_Mode = bool(self.Reference_State.Yaw_Rate_Mode)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Bf = None
def _get_struct_2Bf():
    global _struct_2Bf
    if _struct_2Bf is None:
        _struct_2Bf = struct.Struct("<2Bf")
    return _struct_2Bf
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_B2f = None
def _get_struct_B2f():
    global _struct_B2f
    if _struct_B2f is None:
        _struct_B2f = struct.Struct("<B2f")
    return _struct_B2f
_struct_B3I = None
def _get_struct_B3I():
    global _struct_B3I
    if _struct_B3I is None:
        _struct_B3I = struct.Struct("<B3I")
    return _struct_B3I
